library IEEE;
use IEEE.STD_LOGIC_1164.all;

-- Declaração da entidade Emergencia
entity Emergencia is
    port (
        DR_ENVIAR : in std_logic; -- Sinal de envio
        DR_Porta : in std_logic; -- Sinal do estado da porta
        DR_Reset : in std_logic; -- Sinal de reset normal
        DR_Reset_Emerg : in std_logic; -- Sinal de reset de emergência
        DR_TecladoAndar : in std_logic_vector(2 downto 0); -- Andar de destino
        DR_TecladoQuarto : in std_logic_vector(3 downto 0); -- Quarto de destino
        DR_CodigoLiberação : in std_logic_vector(2 downto 0); -- Código de liberação
        DR_Emerg_SigOUT : out std_logic; -- Sinal de emergência/obstrução
        DR_Tecnico : out std_logic; -- Sinal de técnico chamado
        DR_PortaAberta : out std_logic; -- Indicador de porta aberta
        DR_PortaFechada : out std_logic; -- Indicador de porta fechada
        DR_CHEGOU : out std_logic -- Indicador de chegada
    );
end Emergencia;

-- Arquitetura da entidade Emergencia
architecture arch of Emergencia is
    signal ESTADO : std_logic := '0'; -- Estado interno para controlar a saída de emergência
    signal TEMPORIZADOR : integer := 0; -- Temporizador para controle de tempo
    signal TEMPO_LIMITE : integer := 30000000; -- Limite de tempo (30 segundos, assumindo clock de 1 MHz)
    signal CODIGO_CORRETO : std_logic_vector(2 downto 0) := "101"; -- Código de liberação predefinido
begin
    -- Processo para controlar o estado baseado nos sinais de entrada
    process (DR_ENVIAR, DR_Porta, DR_Reset, DR_Reset_Emerg, DR_CodigoLiberação)
    begin
        if DR_Reset = '1' then
            -- Reset normal: zera os estados
            ESTADO <= '0';
            TEMPORIZADOR <= 0;
            DR_Emerg_SigOUT <= '0';
            DR_Tecnico <= '0';
            DR_PortaAberta <= '0';
            DR_PortaFechada <= '0';
            DR_CHEGOU <= '0';
        elsif DR_Reset_Emerg = '1' then
            -- Reset de emergência: desativa o sinal de emergência e técnico
            ESTADO <= '0';
            DR_Emerg_SigOUT <= '0';
            DR_Tecnico <= '0';
        elsif rising_edge(DR_ENVIAR) then
            if DR_Porta = '1' then
                -- Porta fechada: inicia o envio
                DR_PortaFechada <= '1';
                DR_PortaAberta <= '0';
                TEMPORIZADOR <= 0; -- Reinicia o temporizador
                ESTADO <= '1'; -- Muda o estado para enviado
            else
                -- Porta aberta: não permite o envio
                DR_PortaFechada <= '0';
                DR_PortaAberta <= '1';
            end if;
        elsif ESTADO = '1' then
            -- Estado de envio: incrementa o temporizador
            if TEMPORIZADOR < TEMPO_LIMITE then
                TEMPORIZADOR <= TEMPORIZADOR + 1;
            else
                -- Tempo limite atingido: sinaliza emergência/obstrução
                DR_Emerg_SigOUT <= '1';
                DR_Tecnico <= '1';
                ESTADO <= '0'; -- Reseta o estado de envio
            end if;
        elsif rising_edge(DR_CodigoLiberação) then
            if DR_CodigoLiberação = CODIGO_CORRETO then
                -- Código correto: sinaliza chegada e desativa emergência
                DR_CHEGOU <= '1';
                DR_Emerg_SigOUT <= '0';
                DR_Tecnico <= '0';
            end if;
        end if;
    end process;
end arch;
