library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Subway is
    port (
        DR_TecladoAndar       : in std_logic_vector(2 downto 0);  -- 3 bits para representar até 7 andares
        DR_TecladoQuarto      : in std_logic_vector(3 downto 0);  -- 4 bits para representar até 15 quartos por andar
        DR_Porta              : in std_logic;                      -- Porta do metrô
        DR_ENVIAR             : in std_logic;                      -- Switch para enviar a cápsula
        DR_CodigoLiberacao    : in std_logic_vector(2 downto 0);  -- 3 bits para código de liberação
        DR_Reset              : in std_logic;                      -- Switch para reset
        DR_Reset_Emerg        : in std_logic;                      -- Switch para reset de emergência

        DR_Emerg_SigOUT       : out std_logic;                     -- Sinal de emergência
        DR_Tecnico            : out std_logic;                     -- Indica que o técnico foi chamado
        DR_PortaAberta        : out std_logic;                     -- Indica que a porta está aberta
        DR_PortaFechada       : out std_logic;                     -- Indica que a porta está fechada
        DR_CHEGOU             : out std_logic                      -- Indica que a cápsula chegou ao destino
    );
end entity;

architecture Behavioral of Subway is

    signal Timer              : unsigned(29 downto 0);             -- Timer para 30 segundos (assumindo um clock de 1 MHz)
    signal CapsuleSent        : std_logic := '0';                  -- Sinaliza que a cápsula foi enviada
    signal CapsuleArrived     : std_logic := '0';                  -- Sinaliza que a cápsula chegou
    signal EmergencyActive    : std_logic := '0';                  -- Sinaliza que uma emergência está ativa
    signal TimerExpired       : std_logic := '0';                  -- Sinaliza que o tempo expirou
    signal InternalState      : std_logic_vector(1 downto 0) := "00"; -- Estado interno da FSM

    -- Constantes de Estado
    constant IDLE             : std_logic_vector(1 downto 0) := "00";
    constant SENDING          : std_logic_vector(1 downto 0) := "01";
    constant ARRIVED          : std_logic_vector(1 downto 0) := "10";
    constant EMERGENCY        : std_logic_vector(1 downto 0) := "11";

begin

    process (DR_ENVIAR, DR_Porta, DR_Reset, DR_Reset_Emerg, TimerExpired, CapsuleArrived, DR_CodigoLiberacao)
    begin
        case InternalState is
            when IDLE =>
                if DR_Reset = '1' then
                    CapsuleSent <= '0';
                    CapsuleArrived <= '0';
                    Timer <= (others => '0');
                    TimerExpired <= '0';
                    EmergencyActive <= '0';
                    DR_CHEGOU <= '0';
                    DR_Tecnico <= '0';
                    DR_PortaAberta <= '0';
                    DR_PortaFechada <= '0';
                    InternalState <= IDLE;
                elsif DR_ENVIAR = '1' and DR_Porta = '0' then
                    CapsuleSent <= '1';
                    DR_PortaFechada <= '1';
                    DR_PortaAberta <= '0';
                    Timer <= (others => '0');
                    InternalState <= SENDING;
                elsif DR_ENVIAR = '1' and DR_Porta = '1' then
                    DR_PortaFechada <= '0';
                    DR_PortaAberta <= '1';
                end if;

            when SENDING =>
                if TimerExpired = '1' then
                    EmergencyActive <= '1';
                    DR_Emerg_SigOUT <= '1';
                    InternalState <= EMERGENCY;
                elsif CapsuleArrived = '1' then
                    CapsuleSent <= '0';
                    DR_CHEGOU <= '1';
                    InternalState <= ARRIVED;
                end if;

            when ARRIVED =>
                if DR_CodigoLiberacao = "predefined_code" then -- Substitua por código real
                    DR_CHEGOU <= '0';
                    InternalState <= IDLE;
                end if;

            when EMERGENCY =>
                if DR_Reset_Emerg = '1' then
                    EmergencyActive <= '0';
                    DR_Emerg_SigOUT <= '0';
                    DR_Tecnico <= '1';
                    InternalState <= IDLE;
                end if;

            when others =>
                InternalState <= IDLE;

        end case;
    end process;

    -- Timer para controle de 30 segundos
    process (DR_ENVIAR, Timer)
    begin
        if DR_ENVIAR = '1' then
            if Timer = 30_000_000 then -- Assumindo clock de 1 MHz
                TimerExpired <= '1';
            else
                Timer <= Timer + 1;
            end if;
        else
            Timer <= (others => '0');
            TimerExpired <= '0';
        end if;
    end process;

end Behavioral;
